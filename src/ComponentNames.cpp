/*
 * ComponentNames.cpp
 * Generated from generator_in_files/ComponentNames.cpp.in
 * This file should be automatically generated by the python script
 * generate_component_names.py. It contains text to function mappings for
 * serializing each component to/from json
 */

#include "ComponentNames.hpp"

using namespace std;

void ReiDV::getToJson(entt::registry& reg,
	const entt::entity entity,
	json& j,
	string type_text)
{
	if (type_text == "AllBatSounds") {
		getToJson<AllBatSounds>(reg, entity, j, "AllBatSounds");
	} else if (type_text == "Hill") {
		getToJson<Hill>(reg, entity, j, "Hill");
	} else if (type_text == "Water") {
		getToJson<Water>(reg, entity, j, "Water");
	} else if (type_text == "Bat") {
		getToJson<Bat>(reg, entity, j, "Bat");
	} else if (type_text == "Child") {
		getToJson<Child>(reg, entity, j, "Child");
	} else if (type_text == "Parent") {
		getToJson<Parent>(reg, entity, j, "Parent");
	} else if (type_text == "DroneSound") {
		getToJson<DroneSound>(reg, entity, j, "DroneSound");
	} else if (type_text == "HoverSound") {
		getToJson<HoverSound>(reg, entity, j, "HoverSound");
	} else if (type_text == "WorldVel") {
		getToJson<WorldVel>(reg, entity, j, "WorldVel");
	} else if (type_text == "WorldPos") {
		getToJson<WorldPos>(reg, entity, j, "WorldPos");
	} else if (type_text == "SpriteMulti") {
		getToJson<SpriteMulti>(reg, entity, j, "SpriteMulti");
	} else if (type_text == "SpriteSizeRot") {
		getToJson<SpriteSizeRot>(reg, entity, j, "SpriteSizeRot");
	} else if (type_text == "SpriteQuad") {
		getToJson<SpriteQuad>(reg, entity, j, "SpriteQuad");
	} else if (type_text == "SpriteAnim") {
		getToJson<SpriteAnim>(reg, entity, j, "SpriteAnim");
	} else if (type_text == "ScreenPos") {
		getToJson<ScreenPos>(reg, entity, j, "ScreenPos");
	} else if (type_text == "LevelObj") {
		getToJson<LevelObj>(reg, entity, j, "LevelObj");
	} else if (type_text == "HitBox") {
		getToJson<HitBox>(reg, entity, j, "HitBox");
	}
}

void ReiDV::getFromJson(entt::registry& reg,
	const entt::entity entity,
	const json j,
	string type_text)
{
	if (type_text == "AllBatSounds") {
		getFromJson<AllBatSounds>(reg, entity, j, "AllBatSounds");
	} else if (type_text == "Hill") {
		getFromJson<Hill>(reg, entity, j, "Hill");
	} else if (type_text == "Water") {
		getFromJson<Water>(reg, entity, j, "Water");
	} else if (type_text == "Bat") {
		getFromJson<Bat>(reg, entity, j, "Bat");
	} else if (type_text == "Child") {
		getFromJson<Child>(reg, entity, j, "Child");
	} else if (type_text == "Parent") {
		getFromJson<Parent>(reg, entity, j, "Parent");
	} else if (type_text == "DroneSound") {
		getFromJson<DroneSound>(reg, entity, j, "DroneSound");
	} else if (type_text == "HoverSound") {
		getFromJson<HoverSound>(reg, entity, j, "HoverSound");
	} else if (type_text == "WorldVel") {
		getFromJson<WorldVel>(reg, entity, j, "WorldVel");
	} else if (type_text == "WorldPos") {
		getFromJson<WorldPos>(reg, entity, j, "WorldPos");
	} else if (type_text == "SpriteMulti") {
		getFromJson<SpriteMulti>(reg, entity, j, "SpriteMulti");
	} else if (type_text == "SpriteSizeRot") {
		getFromJson<SpriteSizeRot>(reg, entity, j, "SpriteSizeRot");
	} else if (type_text == "SpriteQuad") {
		getFromJson<SpriteQuad>(reg, entity, j, "SpriteQuad");
	} else if (type_text == "SpriteAnim") {
		getFromJson<SpriteAnim>(reg, entity, j, "SpriteAnim");
	} else if (type_text == "ScreenPos") {
		getFromJson<ScreenPos>(reg, entity, j, "ScreenPos");
	} else if (type_text == "LevelObj") {
		getFromJson<LevelObj>(reg, entity, j, "LevelObj");
	} else if (type_text == "HitBox") {
		getFromJson<HitBox>(reg, entity, j, "HitBox");
	}
}

json ReiDV::entityToJson(entt::registry& reg, const entt::entity entity)
{
	json j;
	getToJson<AllBatSounds>(reg, entity, j, "AllBatSounds");
	getToJson<Hill>(reg, entity, j, "Hill");
	getToJson<Water>(reg, entity, j, "Water");
	getToJson<Bat>(reg, entity, j, "Bat");
	getToJson<Child>(reg, entity, j, "Child");
	getToJson<Parent>(reg, entity, j, "Parent");
	getToJson<DroneSound>(reg, entity, j, "DroneSound");
	getToJson<HoverSound>(reg, entity, j, "HoverSound");
	getToJson<WorldVel>(reg, entity, j, "WorldVel");
	getToJson<WorldPos>(reg, entity, j, "WorldPos");
	getToJson<SpriteMulti>(reg, entity, j, "SpriteMulti");
	getToJson<SpriteSizeRot>(reg, entity, j, "SpriteSizeRot");
	getToJson<SpriteQuad>(reg, entity, j, "SpriteQuad");
	getToJson<SpriteAnim>(reg, entity, j, "SpriteAnim");
	getToJson<ScreenPos>(reg, entity, j, "ScreenPos");
	getToJson<LevelObj>(reg, entity, j, "LevelObj");
	getToJson<HitBox>(reg, entity, j, "HitBox");
	return j;
}

json ReiDV::jsonToEntity(entt::registry& reg, const entt::entity entity)
{
	json j;
	getFromJson<AllBatSounds>(reg, entity, j, "AllBatSounds");
	getFromJson<Hill>(reg, entity, j, "Hill");
	getFromJson<Water>(reg, entity, j, "Water");
	getFromJson<Bat>(reg, entity, j, "Bat");
	getFromJson<Child>(reg, entity, j, "Child");
	getFromJson<Parent>(reg, entity, j, "Parent");
	getFromJson<DroneSound>(reg, entity, j, "DroneSound");
	getFromJson<HoverSound>(reg, entity, j, "HoverSound");
	getFromJson<WorldVel>(reg, entity, j, "WorldVel");
	getFromJson<WorldPos>(reg, entity, j, "WorldPos");
	getFromJson<SpriteMulti>(reg, entity, j, "SpriteMulti");
	getFromJson<SpriteSizeRot>(reg, entity, j, "SpriteSizeRot");
	getFromJson<SpriteQuad>(reg, entity, j, "SpriteQuad");
	getFromJson<SpriteAnim>(reg, entity, j, "SpriteAnim");
	getFromJson<ScreenPos>(reg, entity, j, "ScreenPos");
	getFromJson<LevelObj>(reg, entity, j, "LevelObj");
	getFromJson<HitBox>(reg, entity, j, "HitBox");
	return j;
}
