#include <raylib.h>
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <memory>

#include "catclock.h"
#include "viewrenderer.h"
#include "resman.h"
#include "environment.h"
#include "messagelist.h"

//this is generated by CMake, feel free to remove and edit the defines below
#include "catconf.h"

#ifndef CATCONF_H
#define CAT_VERBOSITY 0
#define COPYCAT_VERSION_MAJOR 0
#define COPYCAT_VERSION_MINOR 0
#endif

using namespace std;

const bool debug = (CAT_VERBOSITY > 0);

void parseSystemMessages(vector<Message> messages) {
	for (auto const& message: messages) {
		cout << "Message from " << message.src_id
			<< " : " << message.message << endl;
	}
}

int main(int argc, char* argv[])
{
    const int screen_w = 1280;	//size of viewport in pixels
	const int screen_h = 720;

	stringstream window_title;
	window_title << "copycat version "
		<< int(COPYCAT_VERSION_MAJOR)
		<< "." << int(COPYCAT_VERSION_MINOR);

    InitWindow(screen_w, screen_h, window_title.str().c_str());

    ResMan resman(debug);
    ViewRenderer view(screen_w, screen_h, debug);
    Environment environment(8, 128);

    SetTargetFPS(60);
	
    CatClock clk;

    bool waiting_to_load_test_region = true;

    while (!WindowShouldClose()) {
    	clk.tick(GetFrameTime());
    	resman.loadNextImage();

		MessageList buffer = environment.update(clk, resman);

		buffer.emplace(
			0,
			1,
			Message::Type::say,
			"spin"
		);
		if (waiting_to_load_test_region) {
			TexSprite test_sprite = resman.constructSprite(
				"debug",
				TexSprite::Type::world,
				{64,96}
			);
			test_sprite.setOffset({0,0});
			environment.insertObject(std::make_shared<Example>(test_sprite));
			waiting_to_load_test_region = false;
		}

		parseSystemMessages(buffer.getMessagesByDest(0));

		view.render(clk, environment, resman);

		environment.distributeMessages(buffer);
		resman.loadNextTex();
    }
    
    CloseWindow();

    return 0;
}
