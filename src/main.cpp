#include <raylib.h>
#include "viewrenderer.h"
#include "resman.h"
#include "environment.h"
#include "messagelist.h"
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include "catclock.h"

//this is generated by CMake, feel free to remove and edit the defines below
#include "catconf.h"

#ifndef CATCONF_H
#define CAT_VERBOSITY 0
#define COPYCAT_VERSION_MAJOR 0
#define COPYCAT_VERSION_MINOR 0
#endif

using namespace std;

const bool debug = (CAT_VERBOSITY > 0);

void parseSystemMessages(vector<Message> messages) {
	for (auto const& message: messages) {
		cout << "Message from " << message.src_id
			<< " : " << message.message << endl;
	}
}

int main(int argc, char* argv[])
{
    const int screen_w = 1280;	//size of viewport in pixels
	const int screen_h = 720;

	stringstream window_title;
	window_title << "copycat version "
		<< int(COPYCAT_VERSION_MAJOR)
		<< "." << int(COPYCAT_VERSION_MINOR);

    InitWindow(screen_w, screen_h, window_title.str().c_str());

    ResMan resman(debug);
    ViewRenderer view(screen_w, screen_h, debug);
    Environment environment(8, 128);

    environment.insertObject(
    	make_shared<FloorTile>(
    		FloorTile::floor,
			resman.createTextureSprite(
				"tile/floor_dirt",
				SpriteType::world,
				(Vector2){10,10}
			)
		)
    );

    SetTargetFPS(60);
	
    CatClock clk;

    while (!WindowShouldClose()) {
    	clk.tick(GetFrameTime());

		MessageList buffer = environment.update(clk, resman);
		parseSystemMessages(buffer.getMessagesByDest(0));

		resman.loadTextures();
		resman.deleteUnused();
		view.render(clk, environment);

		environment.distributeMessages(buffer);
		resman.loadImages();
    }
    
    CloseWindow();

    return 0;
}
