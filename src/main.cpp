#include <raylib.h>
#include "viewrenderer.h"
#include "resman.h"
#include "environment.h"
#include "messagelist.h"
#include <iostream>
#include <stdlib.h>
#include <string.h>

//this is generated by CMake, feel free to remove and edit the defines below
#include "catconf.h"

#ifndef CATCONF_H
#define CAT_VERBOSITY 0
#define COPYCAT_VERSION_MAJOR 0
#define COPYCAT_VERSION_MINOR 0
#endif

using namespace std;

const bool debug = (CAT_VERBOSITY > 0);

void parseSystemMessages(vector<Message> messages) {
	for (auto const& message: messages) {
		cout << "Message from " << message.src_id
			<< " : " << message.message << endl;
	}
}

int main(int argc, char* argv[])
{
    const int screen_w = 1280;	//size of viewport in pixels
	const int screen_h = 720;

	stringstream window_title;
	window_title << "copycat version "
		<< int(COPYCAT_VERSION_MAJOR)
		<< "." << int(COPYCAT_VERSION_MINOR);

    InitWindow(screen_w, screen_h, window_title.str().c_str());

    ResMan resman(debug);
    ViewRenderer view(screen_w, screen_h, debug);
    Environment environment(8, 128);

    SetTargetFPS(60);
	
    float counter_ms = 0;
    unsigned long time_s = 0;

    while (!WindowShouldClose()) {
    	float dt = GetFrameTime();
    	counter_ms += dt;
    	int tick = 0;
    	if (counter_ms > 1.0) {
    		++time_s;
    		tick = 1;
    		//subtract by 1000 rather than setting =0,
    		//so the time_s doesn't drift too much
    		counter_ms -= 1.0;
    	}
		MessageList buffer = environment.update(dt, time_s, tick, resman);
		parseSystemMessages(buffer.getMessagesByDest(0));

		resman.loadTextures(dt);
		resman.deleteUnused();
		view.render(dt, environment);

		if (time_s%19 == 3 && tick == 1) {
			DebugPrinter::printDebug("main", "set example to 100", 4);
			buffer.emplace(0,1,Message::Type::say,"set 100");
		} else if (time_s%123 == 4 && tick == 1) {
			DebugPrinter::printDebug("main", "reset example", 4);
			buffer.emplace(0,1,Message::Type::say,"reset");
		}
		environment.distributeMessages(buffer);
    }
    
    CloseWindow();

    return 0;
}
